
cfg = """
window.MathJax = {
  tex2jax: {
    inlineMath: [ ['~~~$+','+$~~~'] ],
    displayMath: [ ['~~~$$','$$~~~'] ],
    processEscapes: true
  },
  TeX: {
    equationNumbers: {
       autoNumber: 'AMS'
    }
  }
};
"""

cdn = "https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"

install{@, options} =

   @register-resources with {
      "mathjax/config.js" => {
         contents = cfg
         inline = true
         path = null
         type = .js
         method = .head
      }
      cdn => {
         path = cdn
         path-is-url = true
         contents = false
         type = .js
         method = .head
      }
   }

   @register-rules with {

      "$+ \\math"{engine, {=> math}} =
         {"~~~$+", raw % math.shed{}.raw{}, "+$~~~"}

      "\\maybe\\descr $$ \\math"{engine, {=> descr, => math}} =
         {var type, *cls} = ["X" + descr.raw{}.trim{}].split{R"(?=[.#])"}
         type = type[1..] or "align"
         parts = math.statements{} each stmt ->
            match stmt.extract{"* \\nonum", "\\maybe\\tag # \\num", "\\other"}:
               {=> nonum} ->
                  '{nonum.raw{}}\\nonumber' + "\\\\"
               {=> tag >> tag.raw{}.trim{}, => num} ->
                  match tag:
                     "" -> num.raw{} + "\\\\"
                     else -> '{num.raw{}}\\label\{{tag}\}\\tag\{{tag}\}' + "\\\\"
               {=> other} ->
                  other.raw{}
         contents = parts.join{"\n"}.replace{R"\\\\$", ""}
         value =
            if type === 'raw':
               contents
            else:
               '\\begin\{{type}\}\n{contents}\n\\end\{{type}\}'
         core = {"~~~$$", raw % value, "$$~~~"}
         if cls.length:
            ENode{{.div, *cls}, {=}, core}
         else:
            core

      "$@ \\ref"{engine, {=> ref}} =
         r = '\\ref\{{ref.raw{}}\}'
         {"~~~$+", raw % r, "+$~~~"}

   }

main{*match} =
   {@, options = {=}} when @is-quaint-engine ->
      install{@, options}
   {options = {=}} ->
      {@} -> main{@, options}

provide = main

